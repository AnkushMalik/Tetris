{"version":3,"sources":["components/cell/cell-styled.component.jsx","helpers/tetrominos.js","components/cell/cell.component.jsx","components/playground/pg-style.component.jsx","components/playground/playground.component.jsx","components/display-field/display-style.component.jsx","components/display-field/display-field.component.jsx","components/action-button/styledaction.component.jsx","components/action-button/actionbutton.component.jsx","helpers/playgroundHelper.js","hooks/usePlayground.hook.jsx","hooks/usePlayer.hook.jsx","pages/game/gamepage.component.jsx","hooks/useGameStatus.hook.jsx","hooks/useInterval.hook.jsx","App.js","index.js"],"names":["StylishCell","styled","div","props","color","type","TETROMINOS","0","shape","I","J","L","O","S","T","Z","randomTtr","randTtr","Math","floor","random","length","Cell","PgDiv","height","width","Playground","pg","map","e","cell","idx","key","StyledDisplay","gameOver","DisplayField","text","StyledButton","button","ActionButton","callback","onClick","createpg","Array","from","fill","checkCollision","player","playground","moveX","x","moveY","y","tetromino","pos","usePlayground","resetPlayer","useState","setPg","rowsCleared","setRowsCleared","useEffect","updatepg","prevPG","newpg","row","forEach","val","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","usePlayer","setPlayer","rotate","matrix","dir","mtrx","_","index","column","reverse","useCallback","pgwidth","clonedPlayer","JSON","parse","stringify","offset","GamePage","dropTime","setDropTime","setGameOver","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","console","log","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","move","keyCode","className","role","tabIndex","onKeyUp","onKeyDown","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eada9087.chunk.js","sourcesContent":["import styled from 'styled-components'\n\nexport const StylishCell = styled.div`\n    width: auto;\n    background: rgba(${props => props.color}, 0.8);\n    border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n    border-bottom-color: rgba(${props => props.color}, 0.1);\n    border-right-color: rgba(${props => props.color}, 1);\n    border-top-color: rgba(${props => props.color}, 1);\n    border-left-color: rgba(${props => props.color}, 0.3);\n`;","export const TETROMINOS = {\n    0: { shape: [[0]], color: '0, 0, 0' },\n    I: {\n        shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\n        color: '80, 227, 230',\n    },\n    J: { shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]], color: '36, 95, 223' },\n    L: {\n        shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\n        color: '223, 173, 36',\n    },\n    O: { shape: [['O', 'O'], ['O', 'O']], color: '223, 217, 36' },\n    S: { shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]], color: '48, 211, 56' }, //why zero array? for fitting in random tetramino shape!\n    T: {\n        shape: [['T', 'T', 'T'], [0, 'T', 0], [0, 0, 0]],\n        color: '132, 61, 198',\n    },\n    Z: { shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]], color: '227, 78, 78' },\n};\n\nexport const randomTtr = () => {\n    const tetrominos = 'IJLOSTZ'\n    const randTtr = tetrominos[Math.floor(Math.random() * tetrominos.length)]\n\n    return TETROMINOS[randTtr]\n}","import React from 'react'\n\nimport { StylishCell } from './cell-styled.component'\nimport { TETROMINOS } from '../../helpers/tetrominos'\n\nconst Cell = (props) => {\n    return (\n        <StylishCell type={props.type} color={TETROMINOS[props.type].color}></StylishCell >\n    )\n}\n\n\nexport default Cell","import styled from 'styled-components';\n\nexport const PgDiv = styled.div`\n    display: grid;\n    grid-template-rows: repeat(\n        ${props => props.height},\n        calc(30vw/${props => props.width})\n    );\n    grid-template-columns: repeat(${props => props.width},1fr);\n    grid-gap: 1px;\n    max-width: 30vw;\n    background: #111;\n    border: 2px solid #333;\n    width: 100%;\n`","import React from 'react'\n\nimport Cell from '../cell/cell.component'\nimport { PgDiv } from './pg-style.component'\n\nexport const Playground = ({ pg }) => (\n    <PgDiv height={pg.length} width={pg[0].length}>\n        {\n\n            pg.map(e =>\n                e.map((cell, idx) => <Cell key={idx} type={cell[0]} />)\n            )\n        }\n    </PgDiv>\n)","import styled from 'styled-components'\n\nexport const StyledDisplay = styled.div`\n    box-sizing: border-box;\n    display: flex;\n    align-items: center;\n    margin: 0 0 20px 0;\n    padding: 20px;\n    border: 4px solid #333;\n    min-height: 30px;\n    width: 100%;\n    color: ${props => (props.gameOver ? 'red' : '#999')};\n    background: #000;\n    font-size: 0.8rem;\n`","import React from 'react'\n\nimport { StyledDisplay } from './display-style.component'\n\nexport const DisplayField = ({ gameOver, text }) => (\n    <StyledDisplay gameOver={gameOver}>\n        {text}\n    </StyledDisplay>\n)","import styled from 'styled-components'\n\nexport const StyledButton = styled.button`\n    height: 50px\n    min-height: 30px;\n    width: 100%;\n    font-size: 1.25rem;\n    font-family: 'Press Start 2P', cursive;\n    background: black;\n    color: rgb(153, 153, 153);\n    border : 2px solid rgb(153, 153, 153);\n    &:hover{\n        background: white;\n        color: grey;\n        border: 2px solid grey;\n    }\n`","import React from 'react'\n\nimport { StyledButton } from './styledaction.component'\nexport const ActionButton = ({ callback }) => (\n    <StyledButton onClick={callback}>\n        Start!\n    </StyledButton>\n)","export const pgwidth = 12   //4*3\nexport const pgheight = 20  //4*5\n\nexport const createpg = () => (\n    Array.from(Array(pgheight), () =>\n        new Array(pgwidth).fill([0, 'clear'])\n    )\n);\n\nexport const checkCollision = (player, playground, { x: moveX, y: moveY }) => {\n    for (let y = 0; y < player.tetromino.length; y += 1) {\n        for (let x = 0; x < player.tetromino[y].length; x += 1) {\n            // 1. Check that we're on an actual Tetromino cell\n            if (player.tetromino[y][x] !== 0) {\n                if (\n                    // 2. Check that our move is inside the game areas height (y)\n                    // That we're not go through bottom of the play area\n                    !playground[y + player.pos.y + moveY] ||\n                    // 3. Check that our move is inside the game areas width (x)\n                    !playground[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n                    // 4. Check that the cell wer'e moving to isn't set to clear\n                    playground[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n                    'clear'\n                ) {\n                    return true;\n                }\n            }\n        }\n    }\n    // 5. If everything above is false\n    return false;\n};","import { useState, useEffect } from 'react'\n\nimport { createpg } from '../helpers/playgroundHelper'\n\nexport const usePlayground = (player, resetPlayer) => {\n    const [pg, setPg] = useState(createpg());\n    const [rowsCleared, setRowsCleared] = useState(0);\n\n    useEffect(() => {\n        setRowsCleared(0);\n\n        const sweepRows = newpg =>\n            newpg.reduce((ack, row) => {\n                if (row.findIndex(cell => cell[0] === 0) === -1) {\n                    setRowsCleared(prev => prev + 1);\n                    ack.unshift(new Array(newpg[0].length).fill([0, 'clear']));\n                    return ack;\n                }\n                ack.push(row);\n                return ack;\n            }, []);\n\n\n        const updatepg = prevPG => {\n            //clean the playground\n            const newpg = prevPG.map(\n                row => row.map(\n                    cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)\n                )\n            );\n            //draW TETROMINO\n            player.tetromino.forEach((row, y) => {\n                row.forEach((val, x) => {\n                    if (val !== 0) {\n                        newpg[y + player.pos.y][x + player.pos.x] = [\n                            val,\n                            `${player.collided ? 'merge' : 'clear'}`\n                        ]\n                    }\n                })\n            });\n            // check collision\n            if (player.collided) {\n                resetPlayer();\n                return sweepRows(newpg);\n            }\n\n\n            return newpg;\n        }\n        setPg(prev => updatepg(prev))\n    }, [player, resetPlayer])\n\n    return [pg, setPg, rowsCleared];\n}","import { useState, useCallback } from 'react'\nimport { TETROMINOS, randomTtr } from '../helpers/tetrominos'\nimport { pgwidth, checkCollision } from '../helpers/playgroundHelper';\n\nexport const usePlayer = () => {\n    const [player, setPlayer] = useState({\n        pos: { x: 0, y: 0 },\n        tetromino: TETROMINOS[0].shape,\n        collided: false\n    });\n\n    function rotate(matrix, dir) {\n        const mtrx = matrix.map((_, index) => matrix.map(column => column[index])); //transpose\n        if (dir > 0) return mtrx.map(row => row.reverse());     //clockwise rotated matrix\n        return mtrx.reverse();\n    }\n\n    function playerRotate(pg, dir) {\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n        const pos = clonedPlayer.pos.x;\n        let offset = 1;\n        while (checkCollision(clonedPlayer, pg, { x: 0, y: 0 })) {\n            clonedPlayer.pos.x += offset;\n            offset = -(offset + (offset > 0 ? 1 : -1));\n            if (offset > clonedPlayer.tetromino[0].length) {\n                rotate(clonedPlayer.tetromino, -dir);\n                clonedPlayer.pos.x = pos;\n                return;\n            }\n        }\n        setPlayer(clonedPlayer);\n    }\n\n    const updatePlayerPos = ({ x, y, collided }) => {\n        setPlayer(prev => ({\n            ...prev,\n            pos: { x: (player.pos.x += x), y: (player.pos.y += y) },\n            collided: collided\n        }))\n    }\n\n    const resetPlayer = useCallback(\n        () => {\n            setPlayer({\n                pos: { x: pgwidth / 2 - 1, y: 0 },\n                tetromino: randomTtr().shape,\n                collided: false\n            })\n        }, [])\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\n}","import React, { useState } from 'react'\n\nimport { Playground } from '../../components/playground/playground.component'\nimport { DisplayField } from '../../components/display-field/display-field.component'\nimport { ActionButton } from '../../components/action-button/actionbutton.component'\nimport { usePlayground } from '../../hooks/usePlayground.hook'\nimport { useInterval } from '../../hooks/useInterval.hook'\nimport { usePlayer } from '../../hooks/usePlayer.hook'\nimport { createpg, checkCollision } from '../../helpers/playgroundHelper';\nimport { useGameStatus } from '../../hooks/useGameStatus.hook'\n\nimport './gamepage.styles.scss'\n\nexport const GamePage = () => {\n\n    const [dropTime, setDropTime] = useState(null);\n    const [gameOver, setGameOver] = useState(false);\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\n    const [pg, setPg, rowsCleared] = usePlayground(player, resetPlayer);\n\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\n\n\n    const startGame = () => {\n        //Reset everything\n        setPg(createpg());\n        setDropTime(1000);\n        resetPlayer();\n        setGameOver(false);\n        setScore(0);\n        setLevel(0);\n        setRows(0);\n    }\n\n    const movePlayer = dir => {\n        if (!checkCollision(player, pg, { x: dir, y: 0 }))\n            updatePlayerPos({ x: dir, y: 0 })\n    }\n\n    const drop = () => {\n        if (rows > (level + 1) * 10) {\n            setLevel(prev => prev + 1);\n            // Also increase speed\n            setDropTime(1000 / (level + 1) + 200);\n        }\n        if (!checkCollision(player, pg, { x: 0, y: 1 })) {\n            updatePlayerPos({ x: 0, y: 1, collided: false })\n        } else {\n            if (player.pos.y < 1) {\n                setGameOver(true);\n                setDropTime(null);\n                console.log('Game Over!');\n            }\n            updatePlayerPos({ x: 0, y: 0, collided: true })\n        }\n    }\n    console.log(player.pos)\n\n    const keyUp = ({ keyCode }) => {\n        if (!gameOver) {\n            // Activate the interval again when user releases down arrow.\n            if (keyCode === 40) {\n                setDropTime(1000 / (level + 1));\n            }\n        }\n    }\n\n    const dropPlayer = () => {\n        setDropTime(null);\n        drop();\n    }\n\n    useInterval(() => {\n        drop();\n    }, dropTime);\n\n    const move = ({ keyCode }) => {\n        if (!gameOver) {\n            switch (keyCode) {\n                case 37:\n                    movePlayer(-1)\n                    break;\n                case 39:\n                    movePlayer(1)\n                    break;\n                case 40:\n                    dropPlayer();\n                    break;\n                case 38:\n                    playerRotate(pg, 1)\n                // eslint-disable-next-line\n                default:\n            }\n        }\n    }\n\n    return (\n        <div className=\"game-page\" role='button' tabIndex='0' onKeyUp={keyUp} onKeyDown={e => move(e)}>\n            <Playground pg={pg} />\n            <div className='infonav'>\n                {gameOver ? (\n                    <DisplayField gameOver={gameOver} text='Game Over' />\n                ) : null\n                }\n                <DisplayField text={`Score : ${score}`} />\n                <DisplayField text={`Rows : ${rows}`} />\n                <DisplayField text={`Level : ${level}`} />\n                <ActionButton callback={startGame} />\n            </div>\n        </div>\n    )\n}","import { useState, useEffect, useCallback } from 'react';\n\nexport const useGameStatus = rowsCleared => {\n    const [score, setScore] = useState(0);\n    const [rows, setRows] = useState(0);\n    const [level, setLevel] = useState(0);\n\n    const linePoints = [40, 100, 300, 1200];\n\n    const calcScore = useCallback(() => {\n        if (rowsCleared > 0) {\n            //  original Tetris score calculation\n            setScore(prev => prev + linePoints[rowsCleared - 1] * (level + 1));\n            setRows(prev => prev + rowsCleared);\n        }\n    }, [level, linePoints, rowsCleared]);\n\n    useEffect(() => {\n        calcScore();\n    }, [calcScore, rowsCleared, score]);\n\n    return [score, setScore, rows, setRows, level, setLevel];\n};","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n    const savedCallback = useRef();\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n\n    // Set up the interval.\n    useEffect(() => {\n        function tick() {\n            savedCallback.current();\n        }\n        if (delay !== null) {\n            const id = setInterval(tick, delay);\n            return () => {\n                clearInterval(id);\n            };\n        }\n    }, [delay]);\n}","import React from 'react';\nimport './App.scss';\nimport { GamePage } from './pages/game/gamepage.component'\n\nconst App = () => (\n  <div className=\"App\">\n    <h1>||| Tetris |||</h1>\n    <GamePage />\n  </div>\n)\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}